apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: tqtezos
  labels:
    app: redis
spec:
  ports:
    - name: redis
      port: 6379
  selector:
    app: redis
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: redis-pv-claim
  namespace: tqtezos
  labels:
    app: redis
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: tqtezos
  labels:
    app: redis
spec:
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: master
          image: redis
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - "redis-cli -h $(hostname) ping"
            initialDelaySeconds: 5
            timeoutSeconds: 5
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - "redis-cli -h $(hostname) ping"
            initialDelaySeconds: 5
            periodSeconds: 3
          # resources:
          #   requests:
          #     cpu: 100m
          #     memory: 100Mi
          ports:
            - containerPort: 6379
          volumeMounts:
            - mountPath: /data
              name: redis-data
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: rpc-auth-service
  namespace: tqtezos
spec:
  selector:
    app: rpc-auth
  ports:
    - port: 8080
      targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rpc-auth
  namespace: tqtezos
spec:
  selector:
    matchLabels:
      app: rpc-auth
  template:
    metadata:
      labels:
        app: rpc-auth
    spec:
      containers:
        - name: rpc-auth
          image: rpc-auth
          imagePullPolicy: Never
          ports:
            - containerPort: 8080
          env:
            - name: REDIS_HOST
              value: redis-service
            - name: REDIS_PORT
              value: "6379"
            - name: TEZOS_RPC_SERVICE
              value: tezos-bootstrap-node-rpc
            - name: TEZOS_RPC_SERVICE_PORT
              value: "8732"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rpc-vending-machine-ingress
  namespace: tqtezos
  annotations:
    # nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  rules:
    - http:
        paths:
          # Client provides chain id and gets back a nonce
          - path: /vending-machine/(.*)
            pathType: Exact
            backend:
              service:
                name: rpc-auth-service
                port:
                  number: 8080
          # Client provides signed data and gets back a secret url
          - path: /vending-machine
            pathType: Exact
            backend:
              service:
                name: rpc-auth-service
                port:
                  number: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: tezos-rpc-ingress
  namespace: tqtezos
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/auth-url: http://$service_name.$namespace.svc.cluster.local:8080/auth
    nginx.ingress.kubernetes.io/auth-snippet: |
      set $service_name "rpc-auth-service";
      # proxy_set_header X-Access-Token "$request_body";

    # nginx.ingress.kubernetes.io/configuration-snippet: |
    #   set $service_name "rpc-auth-service";
    #   set $service_port "8080";
    #   proxy_set_header X-Access-Token "HELLO";
      # auth_request /auth;
      # proxy_method GET;
      # proxy_set_header        Content-Length "";
      # proxy_set_header X-Original-URI $request_uri;
      # proxy_pass_request_body on;
    # nginx.ingress.kubernetes.io/server-snippet: |
    #   set $service_name "rpc-auth-service";
    #   set $service_port "8080";
    #   proxy_set_header X-Access-Token "HELLO";
      # proxy_set_header X-HELLO HELLO;
      # location = /auth {
      #   internal;
      #   proxy_method GET;
      #   # proxy_pass http://127.0.0.1/auth;
      #   # proxy_pass_request_body on;
      #   # proxy_pass_request_body off;
      #   # proxy_set_header        Content-Length "";
      #   # proxy_set_header X-Original-URI $request_uri;
      #   # proxy_set_header Access-Token "HELLELRLERLELREL";
      #   # return 200;
      #   # auth_request_set $auth_status $upstream_status;

      # }
spec:
  rules:
    -  http:
        paths:
          # Client uses secret url to access the RPC endpoint
          - path: /tezos-node-rpc/(.*)
            pathType: Exact
            backend:
              service:
                name: tezos-bootstrap-node-rpc
                port:
                  number: 8732
          # - path: /auth
          #   pathType: Exact
          #   # pathType: Prefix
          #   backend:
          #     service:
          #       name: rpc-auth-service
          #       port:
          #         number: 8080
---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: rpc-auth-ingress
#   namespace: tqtezos
#   annotations:
#     nginx.ingress.kubernetes.io/use-regex: "true"
# spec:
#   rules:
#     - http:
#         paths:
#           - path: /auth
#           # - path: /auth/(.*)
#             # pathType: Exact
#             pathType: Prefix
#             backend:
#               service:
#                 name: rpc-auth-service
#                 port:
#                   number: 8080
# ---

