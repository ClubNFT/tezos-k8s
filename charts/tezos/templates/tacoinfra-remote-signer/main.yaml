{{- range $signerName, $signerConfig := .Values.tacoinfraSigners }}
  {{- include "tezos.checkDupeSignerAccounts" $ }}
  {{- $_ := set $ "signerName" $signerName }}
  {{- $_ := set $ "signerConfig" $signerConfig }}

  {{- include "tacoinfra-remote-signer.serviceAccount" $ }}

apiVersion: v1
kind: Service
metadata:
  name: {{ $signerName }}
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "tacoinfra-remote-signer.labels" $ | nindent 4 }}
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 5000
  selector:
    appType: tacoinfra-remote-signer
    signerName: {{ $signerName }}
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $signerName }}
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "tacoinfra-remote-signer.labels" $ | nindent 4 }}
data:
  accounts.json: |
{{- $accountKeys := list }}
{{- range $accountName := $signerConfig.accounts }}
  {{- $accounts := $.Values.accounts | default dict }}
  {{- $account := get $accounts $accountName | default dict }}
  {{- if not $account }}
    {{- fail (printf "Account '%s' is undefined." $accountName) }}
  {{- end }}

  {{- $_ := set $account "account_name" $accountName }}

  {{- if not (and ($account.key) ($account.key_id)) }}
    {{- fail (printf "Account '%s' requires 'key' and 'key_id' values." $accountName) }}
  {{- end }}
  {{- if (include "tezos.hasSecretKeyPrefix" $account) }}
    {{- fail (printf "'%s' account's key is not a public key." $accountName) }}
  {{- end }}

  {{- $accountKeys = append $accountKeys (pick $account "account_name" "key" "key_id") }}
{{- end }}
{{- $accountKeys | toJson | nindent 4 }}
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $signerName }}
  labels:
    {{- include "tacoinfra-remote-signer.labels" $ | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      appType: tacoinfra-remote-signer
      signerName: {{ $signerName }}
      {{- include "tacoinfra-remote-signer.selectorLabels" $ | nindent 6 }}
  template:
    metadata:
      {{- with $signerConfig.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        appType: tacoinfra-remote-signer
        signerName: {{ $signerName }}
        {{- include "tacoinfra-remote-signer.selectorLabels" $ | nindent 8 }}
    spec:
      {{- with $signerConfig.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ default "" $signerConfig.serviceAccountName }}
      securityContext:
        {{- toYaml $signerConfig.podSecurityContext | nindent 8 }}
      initContainers:
        {{- /* ConfiMap mount is always mounted as ro fs.
            Copy it to empty dir to make it writeable.
        */}}
        - name: copy-cm-to-emptydir
          image: {{ $.Values.images.tacoinfraRemoteSigner }}
          command: ["/bin/sh"]
          args: ["-c", "cp /etc/signer-config/* /app/signer-config; touch keys.json"]
          volumeMounts:
            - name: config-volume
              mountPath: /etc/signer-config
            - name: signer-config
              mountPath: /app/signer-config
        - name: write-keys-json
          image: {{ $.Values.images.tacoinfraRemoteSigner }}
          command: ["python"]
          args:
            - "-c"
            - |
{{ tpl ($.Files.Get "scripts/tacoinfra/create-keys-json.py") $ | indent 13 }}
          volumeMounts:
            - name: signer-config
              mountPath: /app/signer-config
      containers:
        - name: remote-signer
          args: ["kms"]
          {{- /* figure out security context for other containers */}}
          securityContext:
            {{- toYaml $signerConfig.securityContext | nindent 12 }}
          {{- $signerImage := $signerConfig.image | default dict }}
          image: "{{ $signerImage.name | default $.Values.images.tacoinfraRemoteSigner }}"
          imagePullPolicy: {{ default "IfNotPresent" $signerImage.pullPolicy }}
          ports:
            - name: http
              containerPort: 5000
          volumeMounts:
            - name: signer-config
              mountPath: /app/signer-config
              readOnly: true
          env:
            {{- /* Just using some of these for devel */}}
          {{- range $name, $value := $signerConfig.env }}
            - name: {{ $name }}
              value: {{ $value }}
          {{- end }}
            - name: REGION
              value: us-east-1
            - name: FLASK_ENV
              value: development
            - name: AWS_ACCESS_KEY_ID
              value: {{ $.Values.access }}
            - name: AWS_SECRET_ACCESS_KEY
              value: {{ $.Values.secret }}
          # */ -}}
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          {{- with $signerConfig.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        - name: config-volume
          configMap:
            name: {{ $signerName }}
        - name: signer-config
          emptyDir: {}
      {{- with $signerConfig.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $signerConfig.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $signerConfig.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

---
{{- end -}}
