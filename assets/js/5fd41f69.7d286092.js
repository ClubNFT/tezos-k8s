"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[392],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return b}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=l(n),b=a,f=d["".concat(s,".").concat(b)]||d[b]||p[b]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5271:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return b},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return p}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],c={},s="Accounts",l={unversionedId:"Tezos-Accounts",id:"Tezos-Accounts",title:"Accounts",description:"The accounts object of values.yaml defines Tezos accounts used in the chart.",source:"@site/02-Tezos-Accounts.md",sourceDirName:".",slug:"/Tezos-Accounts",permalink:"/Tezos-Accounts",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tezosK8sSidebar",previous:{title:"Helm charts",permalink:"/helm-chart"},next:{title:"Nodes",permalink:"/Tezos-Nodes"}},u={},p=[],d={toc:p};function b(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"accounts"},"Accounts"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"accounts")," object of values.yaml defines Tezos accounts used in the chart.\nBy default no account is configured:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"accounts: {}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"accounts")," is a map where keys are account aliases and values are maps of\nfields ",(0,o.kt)("inlineCode",{parentName:"p"},"key"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"is_bootstrap_baker_account"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"bootstrap_balance")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"signer_url"),"."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"key")," field can be set to a public or private key. For a bootstrap baker,\nit must be set to a private key. The key type will be recognized automatically,\nand the pod will fail if the key type is unexpected."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Public chains: Accounts do not get ",(0,o.kt)("inlineCode",{parentName:"li"},"is_bootstrap_baker_account")," and\n",(0,o.kt)("inlineCode",{parentName:"li"},"bootstrap_balance")," fields."),(0,o.kt)("li",{parentName:"ul"},"Non-public chains: If you don't specify accounts needed by nodes, they can\nbe created deterministically via the above setting. If specifying, accounts\ncan be given a bootstrap balance and can also be configured to be bootstrap\nbaker accounts. Accounts with balances set to \"0\" will be imported by the\nnode but they will not be bootstrap accounts. If you don't set a bootstrap\nbalance, it will default to the ",(0,o.kt)("inlineCode",{parentName:"li"},"bootstrap_mutez")," field above.")),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'accounts:\n  baker0:\n    key: edsk...\n    is_bootstrap_baker_account: true\n    bootstrap_balance: "50000000000000"\n\n  baker1:\n    key: edpk...\n    is_bootstrap_baker_account: false\n    bootstrap_balance: "4000000000000"\n')),(0,o.kt)("p",null,"A public key account can contain a url to a remote signer that signs with the\ncorresponding secret key. You shouldn't need to set this if you're deploying\na tezos-k8s chart's signer into the same namespace. See the ",(0,o.kt)("inlineCode",{parentName:"p"},"signers")," values\nfield below in the file to define remote signers."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'  baker2:\n    key: edpk...\n    is_bootstrap_baker_account: false\n    bootstrap_balance: "4000000000000"\n    signer_url: http://[POD-NAME].[SERVICE-NAME].[NAMESPACE]:6732\n')),(0,o.kt)("p",null,"NOTE - signer_url must be URL to external remote signer without anything extra\nin the path, such as the public key hash."),(0,o.kt)("p",null,"When running bakers for a public net, you must provide your own secret keys.\nFor non public networks you can change the\n",(0,o.kt)("inlineCode",{parentName:"p"},"should_generate_unsafe_deterministic_data")," setting to true, and deterministic\nkeys will be generated for your nodes automatically. If a genesis block hash\nis not provided, that will also be generated. This is helpful for spinning up\nlocal testnets."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"should_generate_unsafe_deterministic_data: false\n")))}b.isMDXComponent=!0}}]);